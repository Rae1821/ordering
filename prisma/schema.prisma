// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Item {
  id          String      @id @default(uuid())
  name        String
  image       String
  description String      @db.Text
  OrderItem   OrderItem[]
  Category    Category?   @relation(fields: [categoryId], references: [name])
  categoryId  String?
  tags        String[]    @default([])
}

model Category {
  id          String @id @default(uuid())
  name        String @unique
  description String
  products    Item[]
}

model OrderItem {
  id       String  @id @default(uuid())
  quantity Int
  item     Item    @relation(fields: [itemId], references: [id])
  itemId   String
  Order    Order?  @relation(fields: [orderId], references: [id])
  orderId  String?
}

model Order {
  id         String      @id @default(uuid())
  items      OrderItem[]
  account    Account     @relation(fields: [accountId], references: [id])
  accountId  String
  submited   Boolean     @default(false)
  fullfilled Boolean     @default(false)
  location   locations   @default(null)
}

//next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Order Order[]

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  permissions   Permissions? @relation(fields: [permissionsId], references: [id])
  permissionsId String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Permissions {
  id            String  @id @default(cuid())
  createItem    Boolean @default(false)
  deleteItem    Boolean @default(false)
  deleteUser    Boolean @default(false)
  changeUser    Boolean @default(false)
  viewOrder     Boolean @default(false)
  completeOrder Boolean @default(false)
  changeOrder   Boolean @default(false)
  User          User[]
}

model Ticket {
  id       String     @id @default(cuid())
  status   status     @default(new)
  date     DateTime?  @default(now())
  location locations
  subject  String     @db.VarChar(200)
  text     String     @db.VarChar(500)
  type     ticketType @default(null)
}

enum locations {
  access
  whitwell
  jasper
  cates
  null
}

enum status {
  new
  inProgress
  completed
}

enum ticketType {
  maintenance
  IT
  null
}
